#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 13 09:49:32 2021

@author: nicolaronzoni
"""
#library 
import scipy 
import pandas as pd 
import sklearn 
import numpy as np 
pip install tslearn 
import tslearn

#import the dataset 
df = pd.read_csv ('/Users/nicolaronzoni/Downloads/I35W_NB 30min 2013/S60.csv')
df


#normalization of the series 
from sklearn.preprocessing import MinMaxScaler, StandardScaler

#flow
flow = df.loc[:, 'Flow']
flow
flow=np.array(flow)
flow = flow.reshape((len(flow), 1))
# train the normalization
scaler = MinMaxScaler(feature_range=(0, 1))
scaler = scaler.fit(flow)
print('Min: %f, Max: %f' % (scaler.data_min_, scaler.data_max_))
normalized_flow = scaler.transform(flow)
#from array to list 
normalized_flow=normalized_flow.tolist()
len(normalized_flow)
from toolz.itertoolz import sliding_window, partition
#create the daily time series 
day_flow=list(partition(48,normalized_flow))
day_flow
len(day_flow)
#from list to array
day_flow=np.asarray(day_flow)
day_flow

from tslearn.utils import to_time_series
#univariate series for the flow normalized 
first_time_series = to_time_series(day_flow)
print(first_time_series.shape)

#speed
speed =df.loc[:,'Speed']
speed=np.array(speed)
speed= speed.reshape((len(speed), 1))
scaler = scaler.fit(speed)
print('Min: %f, Max: %f' % (scaler.data_min_, scaler.data_max_))
# normalize the dataset and print the first 5 rows
normalized_speed = scaler.transform(speed)
normalized_speed

#from array to list 
normalized_speed=normalized_speed.tolist()
len(normalized_speed)
#create daily time series 
day_speed=list(partition(48,normalized_speed))
day_speed
len(day_speed)
#from list to array
day_speed=np.asarray(day_speed)
day_speed

#univariate series for the speed normalized 
second_time_series = to_time_series(day_speed)
print(second_time_series.shape)
second_time_series
#normalized_speed= tuple(map(tuple, normalized_speed))


#creation of the multivariate time series 

multivariate=np.dstack((first_time_series,second_time_series))
multivariate_time_series = to_time_series(multivariate)
print(multivariate_time_series.shape)


#clustering 
from tslearn.clustering import TimeSeriesKMeans
#try Euclidean softdtw dtw
km_dba = TimeSeriesKMeans(n_clusters=4, metric="softdtw", max_iter=5,max_iter_barycenter=5, random_state=0).fit(multivariate_time_series)
km_dba.cluster_centers_.shape
km_dba.cluster_centers_
prediction=km_dba.fit_predict(multivariate_time_series,y=None)
len(prediction)

#visualization 
pip install calplot

import calplot

all_days = pd.date_range('1/1/2013', periods=365, freq='D')
events = pd.Series(prediction, index=all_days)
calplot.calplot(events)



